{"version":3,"sources":["components/MakePizza.js","components/SummaryOrder.js","components/Order.js","components/Basket.js","components/Home.js","components/App.js","serviceWorker.js","index.js"],"names":["MakePizza","props","useState","ingredients","setIngredients","ingredientsCost","setIngredientsCost","pizzaSize","setPizzaSize","pizzaImg","process","Size","btnOrder","toFixed","useEffect","Ingredients","map","ingredient","checked","price","reduce","sum","pizzaIngredients","ingredientImg","name","ingerdientPrice","className","key","id","src","alt","type","onChange","item","htmlFor","handlePizzaSize","onClick","newPizza","forEach","push","newOrderPizza","handdleAddNewPizza","withRouter","pizzas","setPizza","valueOrder","setValueOrder","orderedPizza","valueOrders","pizza","element","icon","faTrashAlt","pizzasList","index","charAt","toUpperCase","slice","length","console","log","deletePizza","filter","handleDeletePizza","ContextConsumer","context","sentData","history","handlePay","Order","setNewPizza","Basket","useContext","orders","indx","basket","to","Home","AppContext","createContext","Consumer","ContextProvider","Provider","App","setBasket","setPizzas","value","exact","path","component","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b8a410e.chunk.js","sourcesContent":["import React, { useState, useEffect, } from 'react';\r\n\r\nimport '../style/Order.scss';\r\n\r\nimport Ingredients from '../data/pizza-ingredients.json';\r\n\r\n\r\n\r\n\r\n\r\nfunction MakePizza(props) {\r\n\r\n    // stan przechowujacy dodatki/ingredients do pizzy\r\n    const [ingredients, setIngredients] = useState([])\r\n    // stan przechowujacy koszt pizzy\r\n    const [ingredientsCost, setIngredientsCost] = useState(0)\r\n    // stan przechowujacy wielkość pizzy\r\n    const [pizzaSize, setPizzaSize] = useState(10)\r\n\r\n    const pizzaImg = `${process.env.PUBLIC_URL}/graphics/pizza.png`\r\n    // zamiana wielkości pizzy wyrazonej w liczbie na nazwę\r\n    let Size = \"small\";\r\n    if (pizzaSize === 10) Size = \"medium\"\r\n    else if (pizzaSize === 12) Size = \"big\"\r\n    // zmienna do przycisku add\r\n    const btnOrder = `Add  ${Size} pizza for: ${ingredientsCost.toFixed(2)} PLN`\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        Ingredients.map(ingredient => {  // pętla  na danych  z .json w celu dodaniado bazy dynamicznie pozycji chcecked \r\n            ingredient.checked = ingredient.price === 0 ? true : false;\r\n            return ingredient\r\n\r\n        })\r\n        setIngredients(Ingredients) // przypisanie danych z bazy .json do state z małej litery\r\n    }, []) // drugi argument wartość poczatkowa state - []\r\n\r\n    useEffect(() => {\r\n        //obliczenie ceny  kiedy wielkosc pizzy i dodatki sie zmieniły\r\n        setIngredientsCost(ingredients.reduce((sum, ingredient) => {\r\n            return ingredient.checked ? sum + ingredient.price : sum;\r\n\r\n        }, pizzaSize)) //pizzaSize wartosc poczatkowa + dodatki\r\n    }, [pizzaSize, ingredients])\r\n\r\n\r\n    // zmienna przechowująca pętle wyswietlająca dodatki\r\n    const pizzaIngredients = ingredients.map(ingredient => {\r\n        //zmienna  przechowujaca link do img dodatków\r\n        const ingredientImg = `${process.env.PUBLIC_URL}/graphics/${ingredient.name}.png`\r\n        //zmienna przechowujaca warunek wyświetlania ceny\r\n        const ingerdientPrice = ingredient.price ? `${ingredient.price.toFixed(2)} PLN` : 'free'\r\n\r\n\r\n        //obsługa kliknięcia w checkbox - zmiana state checked: false/true\r\n        const handleCheckbox = (id) => {\r\n\r\n            setIngredients(\r\n                ingredients.map(item => {\r\n                    if (item.id === id) {\r\n                        item.checked = !item.checked // jesli niezaznaczone zaznacz jesli zazn. odznacz\r\n                    } return item\r\n                }))\r\n        }\r\n        return (\r\n            < div className=\"make-pizza__ingredient\" key={ingredient.id} >\r\n                <img className=\"make-pizza__img\" src={ingredientImg} alt={ingredient.name} />\r\n                <input className=\"make-pizza__input\" type=\"checkbox\"\r\n                    checked={ingredient.checked}\r\n                    id={ingredient.name} onChange={() => handleCheckbox(ingredient.id)} />\r\n                <label htmlFor={ingredient.name}>{ingredient.name} {ingerdientPrice}</label>\r\n\r\n            </div >\r\n        )\r\n    })\r\n\r\n\r\n    const handlePizzaSize = (pizzaSize) => {\r\n        setPizzaSize(pizzaSize)\r\n    }\r\n\r\n\r\n    const handdleAddNewPizza = () => {\r\n\r\n        //nowy obiekt przechowujacy dane wybranej pizzy: wielkość, cena i wybrane dodatki\r\n        let newPizza = { pizzaSize: Size, ingredientsCost: ingredientsCost, ingredients: [] }\r\n        ingredients.forEach(ingredient => {\r\n            if (ingredient.checked) {\r\n                return newPizza.ingredients.push(ingredient.name)\r\n\r\n            }\r\n\r\n\r\n        })\r\n        // wyzerowanie checkbox po kliknieciu poza chees\r\n        setIngredients(\r\n            ingredients.map(item => {\r\n                if (item.checked & item.price > 0) {\r\n                    item.checked = false// przywrócenie false w checkbox  po kliknieciu \r\n                } return item\r\n            }))\r\n\r\n\r\n\r\n\r\n\r\n        // przekazanie props do app\r\n        props.newOrderPizza(newPizza)\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"make-pizza\">\r\n\r\n            <section className=\"make-pizza__pizza-size\">\r\n\r\n                <div className=\"make-pizza__pizza-chosen\">\r\n                    <h1 className=\"make-pizza__title\">Choose pizza size and topings</h1>\r\n\r\n                    <img className={`make-pizza__small-pizza pizza ${pizzaSize === 9 ? \"checked\" : \"\"}`} src={pizzaImg} alt=\"small=pizza\" onClick={() => handlePizzaSize(9)} />\r\n                    <img className={`make-pizza__medium-pizza pizza ${pizzaSize === 10 ? \"checked\" : \"\"} `} src={pizzaImg} alt=\"small=pizza\" onClick={() => handlePizzaSize(10)} />\r\n                    <img className={`make-pizza__big-pizza pizza ${pizzaSize === 12 ? \"checked\" : \"\"} `} src={pizzaImg} alt=\"small=pizza\" onClick={() => handlePizzaSize(12)} />\r\n\r\n                </div>\r\n            </section>\r\n\r\n            <section className=\"make-pizza__additives\">\r\n                <div className=\"make-pizza__ingredients\">\r\n                    {pizzaIngredients}\r\n                </div>\r\n\r\n            </section>\r\n            <section className=\"make-pizza__add-pizza\">\r\n                <button className=\"make-pizza__button \" onClick={() => handdleAddNewPizza()}> {btnOrder}</button>\r\n            </section>\r\n\r\n        </div >\r\n\r\n    );\r\n}\r\n\r\nexport default MakePizza;","import React, { useEffect } from 'react';\r\n\r\nimport { withRouter } from 'react-router-dom'\r\nimport { useState } from 'react';\r\nimport { ContextConsumer } from './App'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport '../style/Order.scss';\r\n\r\n\r\n\r\n\r\n\r\nfunction SummaryOrder(props) {\r\n\r\n\r\n\r\n    const [pizzas, setPizza] = useState([])\r\n    const [valueOrder, setValueOrder] = useState(0)\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        // item = pizzas funkcja pobiera dane ze stanu pizzas i dodaje nowe z props\r\n        if (props.orderedPizza) {\r\n            setPizza(item => [...item, props.orderedPizza])\r\n        }\r\n\r\n    }, [props.orderedPizza])\r\n\r\n    useEffect(() => {\r\n\r\n        let valueOrders = pizzas.reduce((sum, pizza) => {\r\n            return (\r\n                sum + pizza.ingredientsCost\r\n            )\r\n        }, 0)\r\n        setValueOrder(valueOrders)\r\n\r\n\r\n    }, [pizzas])\r\n\r\n    const handleDeletePizza = id => {\r\n        console.log(id)\r\n        let deletePizza = pizzas.filter((pizza, index) => index !== id)\r\n        setPizza(deletePizza)\r\n\r\n\r\n    }\r\n    const element = <FontAwesomeIcon icon={faTrashAlt} />\r\n    const pizzasList = pizzas.map((pizza, index) => {\r\n        return (\r\n            <div className=\" summary__pizza\" key={index}>\r\n\r\n                <li className=\" summary__li\" >{`${pizza.pizzaSize.charAt(0).toUpperCase() + pizza.pizzaSize.slice(1)} pizza with ${pizza.ingredients.length} ingredients ${pizza.ingredientsCost.toFixed(2)} PLN`}\r\n\r\n                </li>\r\n                <span className=\"summary__span\" onClick={() => handleDeletePizza(index)}>{element}</span>\r\n\r\n            </div>\r\n\r\n        )\r\n\r\n    })\r\n\r\n    const handlePay = (context) => {\r\n\r\n\r\n\r\n\r\n        context.sentData(valueOrder, pizzas)\r\n\r\n        props.history.push('/basket')\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <ContextConsumer>\r\n            {(context) => (\r\n\r\n                < div className=\"summary\">\r\n\r\n                    <h3 className=\"summary_title\">Your order:</h3>\r\n                    <div className=\"summary__order\" >\r\n                        <ol>\r\n                            {pizzasList}\r\n                        </ol>\r\n                    </div>\r\n\r\n                    <button className=\"summary__button \" onClick={() => handlePay(context)}>\r\n                        {valueOrder === 0 ? \"Pay\" : `Pay: ${valueOrder.toFixed(2)} PLN`}</button>\r\n\r\n\r\n\r\n\r\n                </div>\r\n            )\r\n            }\r\n        </ContextConsumer >\r\n    )\r\n\r\n}\r\n\r\nexport default withRouter(SummaryOrder);","import React from 'react';\r\n\r\nimport MakePizza from './MakePizza'\r\nimport SummaryOrder from './SummaryOrder'\r\nimport { useState } from 'react';\r\n\r\n\r\n\r\n\r\nfunction Order() {\r\n\r\n\r\n    const [newPizza, setNewPizza] = useState(null)\r\n\r\n    const newOrderPizza = newPizza => {\r\n        setNewPizza(newPizza)\r\n    }\r\n    return (\r\n        <div className=\"order\">\r\n            <MakePizza newOrderPizza={newOrderPizza} />\r\n            <SummaryOrder orderedPizza={newPizza} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Order;","import React, { useContext } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { ContextConsumer } from './App'\r\nimport '../style/Basket.scss';\r\n\r\n\r\nfunction Basket() {\r\n    const context = useContext(ContextConsumer);\r\n    const orders = context.pizzas.map((pizza, index) => (<div key={index}>\r\n        <li>\r\n            {`${pizza.pizzaSize.charAt(0).toUpperCase() + pizza.pizzaSize.slice(1)} pizza with:`} &nbsp;\r\n            {pizza.ingredients.map((item, indx) =>\r\n                <span key={indx}>{item}{indx === (pizza.ingredients.length - 1) ? \".\" : \",\"}&nbsp;</span>)}\r\n        </li>\r\n    </div>\r\n    ))\r\n\r\n    const basket = context.basket;\r\n\r\n\r\n    return (\r\n\r\n        <ContextConsumer>\r\n            {context => (\r\n                < div className=\"basket\">\r\n                    <div> Your order: </div>\r\n                    <ol>\r\n                        {orders}\r\n                    </ol>\r\n\r\n                    <div> Pay: {basket === 0 ? 0 : basket.toFixed(2)} PLN</div>\r\n                    <Link to=\"/Order\">powrót</Link>\r\n\r\n                </div>\r\n            )\r\n            }\r\n\r\n        </ContextConsumer >\r\n    );\r\n}\r\n\r\nexport default Basket;","\r\n\r\nimport React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport '../style/Home.scss'\r\n\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className=\"home\">\r\n\r\n            <section className=\"home__invitation\">\r\n                obrazek\r\n            </section>\r\n            <section className=\"home__order\">\r\n                <Link className=\"home__link\" to=\"/Order\">Order</Link>\r\n            </section>\r\n\r\n\r\n\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Home;","import React, { createContext, useState } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Order from './Order';\nimport Basket from './Basket';\nimport Home from './Home';\nimport '../style/App.scss';\n\n\nconst AppContext = createContext();\nexport const ContextConsumer = AppContext.Consumer;\nconst ContextProvider = AppContext.Provider\n\nfunction App() {\n\n  const [basket, setBasket] = useState(0)\n  const [pizzas, setPizzas] = useState([])\n\n\n\n  const sendDataToBasket = (valueOrder, pizzasList) => {\n    console.log(valueOrder, pizzasList)\n\n    setBasket(valueOrder)\n    setPizzas(pizzasList)\n\n  }\n  return (\n\n    <Router>\n      <ContextProvider value={{ basket: basket, pizzas: pizzas, sentData: sendDataToBasket }}>\n        <div className=\"wrapper\">\n          <header className=\"header\">\n            <div className=\"header__name\">Compose your pizza</div>\n            <div className=\"header__opacity\">xfgfg</div>\n          </header>\n\n          <div className=\"content\">\n\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/Order\" component={Order} />\n            <Route exact path=\"/Basket\" component={Basket} />\n          </div>\n          <footer className=\"footer\">\n            order pizza demo\n                <Link to=\"/\">home</Link><br />\n            <a href=\"https://www.freepik.com/free-photos-vectors/food\">Food vector created by bakar015 - www.freepik.com</a>\n\n            <a href=\"https://www.freepik.com/free-photos-vectors/food\">Food vector created by macrovector - www.freepik.com</a>\n\n            <a href=\"https://www.freepik.com/free-photos-vectors/food\">Food photo created by timolina - www.freepik.com</a>\n\n            <a href=\"https://www.freepik.com/free-photos-vectors/pizza\">Pizza vector created by macrovector - www.freepik.com</a>\n\n\n            <a href=\"https://www.freepik.com/free-photos-vectors/food\">Food vector created by macrovector - www.freepik.com</a>\n          </footer>\n        </div>\n      </ContextProvider>\n    </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}